<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:q="http://qube7.com/composite/xaml">

    <q:BindingProxy x:Key="BindingProxy.CornerRadius" Value="{DynamicResource Control.CornerRadius}" />

    <Thickness x:Key="ThicknessMask.ThreeSided.Left">0,1,1,1</Thickness>
    <Thickness x:Key="ThicknessMask.ThreeSided.Top">1,0,1,1</Thickness>
    <Thickness x:Key="ThicknessMask.ThreeSided.Right">1,1,0,1</Thickness>
    <Thickness x:Key="ThicknessMask.ThreeSided.Bottom">1,1,1,0</Thickness>

    <CornerRadius x:Key="CornerRadiusMask.Flatten.Left">0,1,1,0</CornerRadius>
    <CornerRadius x:Key="CornerRadiusMask.Flatten.Top">0,0,1,1</CornerRadius>
    <CornerRadius x:Key="CornerRadiusMask.Flatten.Right">1,0,0,1</CornerRadius>
    <CornerRadius x:Key="CornerRadiusMask.Flatten.Bottom">1,1,0,0</CornerRadius>

    <Style x:Key="Expander.DownButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Padding" Value="10,4,10,4" />
        <Setter Property="Height" Value="{DynamicResource Control.Height}" />
        <Setter Property="MinHeight" Value="{DynamicResource Control.Height}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Value, Source={StaticResource BindingProxy.CornerRadius}, Converter={q:CornerRadiusMaskConverter Mask={StaticResource CornerRadiusMask.Flatten.Bottom}}}"
                            Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Path x:Name="Glyph"
                                  Grid.Column="0"
                                  Data="{DynamicResource Geometry.ChevronUp}"
                                  Fill="{TemplateBinding Foreground}"
                                  Stretch="Uniform"
                                  Width="10"
                                  Height="10"
                                  VerticalAlignment="Center"
                                  UseLayoutRounding="True" />
                            <ContentPresenter Grid.Column="1"
                                              Margin="6,0,0,0"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Border" Property="CornerRadius" Value="{DynamicResource Control.CornerRadius}" />
                            <Setter TargetName="Glyph" Property="Data" Value="{DynamicResource Geometry.ChevronDown}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Expander.UpButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Padding" Value="10,4,10,4" />
        <Setter Property="Height" Value="{DynamicResource Control.Height}" />
        <Setter Property="MinHeight" Value="{DynamicResource Control.Height}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Value, Source={StaticResource BindingProxy.CornerRadius}, Converter={q:CornerRadiusMaskConverter Mask={StaticResource CornerRadiusMask.Flatten.Top}}}"
                            Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Path x:Name="Glyph"
                                  Grid.Column="0"
                                  Data="{DynamicResource Geometry.ChevronDown}"
                                  Fill="{TemplateBinding Foreground}"
                                  Stretch="Uniform"
                                  Width="10"
                                  Height="10"
                                  VerticalAlignment="Center"
                                  UseLayoutRounding="True" />
                            <ContentPresenter Grid.Column="1"
                                              Margin="6,0,0,0"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Border" Property="CornerRadius" Value="{DynamicResource Control.CornerRadius}" />
                            <Setter TargetName="Glyph" Property="Data" Value="{DynamicResource Geometry.ChevronUp}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Expander.RightButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Padding" Value="4,10,4,10" />
        <Setter Property="Width" Value="{DynamicResource Control.Height}" />
        <Setter Property="MinWidth" Value="{DynamicResource Control.Height}" />
        <Setter Property="MinHeight" Value="{DynamicResource Control.Height}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Value, Source={StaticResource BindingProxy.CornerRadius}, Converter={q:CornerRadiusMaskConverter Mask={StaticResource CornerRadiusMask.Flatten.Right}}}"
                            Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Path x:Name="Glyph"
                                  Grid.Row="0"
                                  Data="{DynamicResource Geometry.ChevronLeft}"
                                  Fill="{TemplateBinding Foreground}"
                                  Stretch="Uniform"
                                  Width="10"
                                  Height="10"
                                  HorizontalAlignment="Center"
                                  UseLayoutRounding="True" />
                            <ContentPresenter Grid.Row="1"
                                              Margin="0,6,0,0"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Border" Property="CornerRadius" Value="{DynamicResource Control.CornerRadius}" />
                            <Setter TargetName="Glyph" Property="Data" Value="{DynamicResource Geometry.ChevronRight}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Expander.LeftButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Padding" Value="4,10,4,10" />
        <Setter Property="Width" Value="{DynamicResource Control.Height}" />
        <Setter Property="MinWidth" Value="{DynamicResource Control.Height}" />
        <Setter Property="MinHeight" Value="{DynamicResource Control.Height}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Value, Source={StaticResource BindingProxy.CornerRadius}, Converter={q:CornerRadiusMaskConverter Mask={StaticResource CornerRadiusMask.Flatten.Left}}}"
                            Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Path x:Name="Glyph"
                                  Grid.Row="0"
                                  Data="{DynamicResource Geometry.ChevronRight}"
                                  Fill="{TemplateBinding Foreground}"
                                  Stretch="Uniform"
                                  Width="10"
                                  Height="10"
                                  HorizontalAlignment="Center"
                                  UseLayoutRounding="True" />
                            <ContentPresenter Grid.Row="1"
                                              Margin="0,6,0,0"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Border" Property="CornerRadius" Value="{DynamicResource Control.CornerRadius}" />
                            <Setter TargetName="Glyph" Property="Data" Value="{DynamicResource Geometry.ChevronLeft}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="Expander.Down" TargetType="{x:Type Expander}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Header"
                          Grid.Row="0"
                          FontFamily="{TemplateBinding FontFamily}"
                          FontSize="{TemplateBinding FontSize}"
                          Foreground="{TemplateBinding Foreground}"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource Expander.DownButton}">
                <ContentPresenter ContentSource="Header">
                    <ContentPresenter.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                        </Style>
                    </ContentPresenter.Resources>
                </ContentPresenter>
            </ToggleButton>
            <Border x:Name="Content"
                    Grid.Row="1"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness, Converter={q:ThicknessMaskConverter Mask={StaticResource ThicknessMask.ThreeSided.Top}}}"
                    CornerRadius="{Binding Value, Source={StaticResource BindingProxy.CornerRadius}, Converter={q:CornerRadiusMaskConverter Mask={StaticResource CornerRadiusMask.Flatten.Top}}}">
                <ContentPresenter Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="Header" Property="IsMouseOver" Value="True">
                <Setter TargetName="Header" Property="Foreground" Value="{DynamicResource Control.MouseOver.Foreground}" />
                <Setter TargetName="Header" Property="Background" Value="{DynamicResource Control.MouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control.MouseOver.BorderBrush}" />
            </Trigger>
            <Trigger SourceName="Header" Property="IsPressed" Value="True">
                <Setter TargetName="Header" Property="Foreground" Value="{DynamicResource Control.Pressed.Foreground}" />
                <Setter TargetName="Header" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="Content" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Expander.Up" TargetType="{x:Type Expander}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Header"
                          Grid.Row="1"
                          FontFamily="{TemplateBinding FontFamily}"
                          FontSize="{TemplateBinding FontSize}"
                          Foreground="{TemplateBinding Foreground}"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource Expander.UpButton}">
                <ContentPresenter ContentSource="Header">
                    <ContentPresenter.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                        </Style>
                    </ContentPresenter.Resources>
                </ContentPresenter>
            </ToggleButton>
            <Border x:Name="Content"
                    Grid.Row="0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness, Converter={q:ThicknessMaskConverter Mask={StaticResource ThicknessMask.ThreeSided.Bottom}}}"
                    CornerRadius="{Binding Value, Source={StaticResource BindingProxy.CornerRadius}, Converter={q:CornerRadiusMaskConverter Mask={StaticResource CornerRadiusMask.Flatten.Bottom}}}">
                <ContentPresenter Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="Header" Property="IsMouseOver" Value="True">
                <Setter TargetName="Header" Property="Foreground" Value="{DynamicResource Control.MouseOver.Foreground}" />
                <Setter TargetName="Header" Property="Background" Value="{DynamicResource Control.MouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control.MouseOver.BorderBrush}" />
            </Trigger>
            <Trigger SourceName="Header" Property="IsPressed" Value="True">
                <Setter TargetName="Header" Property="Foreground" Value="{DynamicResource Control.Pressed.Foreground}" />
                <Setter TargetName="Header" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="Content" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Expander.Right" TargetType="{x:Type Expander}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <ToggleButton x:Name="Header"
                          Grid.Column="0"
                          FontFamily="{TemplateBinding FontFamily}"
                          FontSize="{TemplateBinding FontSize}"
                          Foreground="{TemplateBinding Foreground}"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource Expander.RightButton}">
                <ContentPresenter ContentSource="Header">
                    <ContentPresenter.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="270" />
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ContentPresenter.Resources>
                </ContentPresenter>
            </ToggleButton>
            <Border x:Name="Content"
                    Grid.Column="1"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness, Converter={q:ThicknessMaskConverter Mask={StaticResource ThicknessMask.ThreeSided.Left}}}"
                    CornerRadius="{Binding Value, Source={StaticResource BindingProxy.CornerRadius}, Converter={q:CornerRadiusMaskConverter Mask={StaticResource CornerRadiusMask.Flatten.Left}}}">
                <ContentPresenter Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="Header" Property="IsMouseOver" Value="True">
                <Setter TargetName="Header" Property="Foreground" Value="{DynamicResource Control.MouseOver.Foreground}" />
                <Setter TargetName="Header" Property="Background" Value="{DynamicResource Control.MouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control.MouseOver.BorderBrush}" />
            </Trigger>
            <Trigger SourceName="Header" Property="IsPressed" Value="True">
                <Setter TargetName="Header" Property="Foreground" Value="{DynamicResource Control.Pressed.Foreground}" />
                <Setter TargetName="Header" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="Content" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Expander.Left" TargetType="{x:Type Expander}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ToggleButton x:Name="Header"
                          Grid.Column="1"
                          FontFamily="{TemplateBinding FontFamily}"
                          FontSize="{TemplateBinding FontSize}"
                          Foreground="{TemplateBinding Foreground}"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource Expander.LeftButton}">
                <ContentPresenter ContentSource="Header">
                    <ContentPresenter.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="270" />
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ContentPresenter.Resources>
                </ContentPresenter>
            </ToggleButton>
            <Border x:Name="Content"
                    Grid.Column="0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness, Converter={q:ThicknessMaskConverter Mask={StaticResource ThicknessMask.ThreeSided.Right}}}"
                    CornerRadius="{Binding Value, Source={StaticResource BindingProxy.CornerRadius}, Converter={q:CornerRadiusMaskConverter Mask={StaticResource CornerRadiusMask.Flatten.Right}}}">
                <ContentPresenter Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="Header" Property="IsMouseOver" Value="True">
                <Setter TargetName="Header" Property="Foreground" Value="{DynamicResource Control.MouseOver.Foreground}" />
                <Setter TargetName="Header" Property="Background" Value="{DynamicResource Control.MouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control.MouseOver.BorderBrush}" />
            </Trigger>
            <Trigger SourceName="Header" Property="IsPressed" Value="True">
                <Setter TargetName="Header" Property="Foreground" Value="{DynamicResource Control.Pressed.Foreground}" />
                <Setter TargetName="Header" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Control.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="Content" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="FontFamily" Value="{DynamicResource Control.FontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource Control.FontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource Control.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource Control.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Control.BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource Control.BorderThickness}" />
        <Setter Property="Padding" Value="5,5,5,5" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Style.Triggers>
            <Trigger Property="ExpandDirection" Value="Down">
                <Setter Property="Template" Value="{StaticResource Expander.Down}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
                <Setter Property="Template" Value="{StaticResource Expander.Up}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
                <Setter Property="Template" Value="{StaticResource Expander.Right}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
                <Setter Property="Template" Value="{StaticResource Expander.Left}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource Control.Disabled.Opacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
